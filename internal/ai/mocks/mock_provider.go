// Code generated by go.uber.org/mock/mockgen. DO NOT EDIT.
// Source: github.com/fr0g-66723067/cc/internal/ai (interfaces: Provider)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "go.uber.org/mock/gomock"
	reflect "reflect"
)

// MockProvider is a mock of Provider interface
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// AddFeature mocks base method
func (m *MockProvider) AddFeature(ctx context.Context, codeDir, description string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFeature", ctx, codeDir, description)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFeature indicates an expected call of AddFeature
func (mr *MockProviderMockRecorder) AddFeature(ctx, codeDir, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFeature", reflect.TypeOf((*MockProvider)(nil).AddFeature), ctx, codeDir, description)
}

// AnalyzeCode mocks base method
func (m *MockProvider) AnalyzeCode(ctx context.Context, codeDir string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyzeCode", ctx, codeDir)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalyzeCode indicates an expected call of AnalyzeCode
func (mr *MockProviderMockRecorder) AnalyzeCode(ctx, codeDir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzeCode", reflect.TypeOf((*MockProvider)(nil).AnalyzeCode), ctx, codeDir)
}

// Cleanup mocks base method
func (m *MockProvider) Cleanup(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cleanup", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cleanup indicates an expected call of Cleanup
func (mr *MockProviderMockRecorder) Cleanup(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockProvider)(nil).Cleanup), ctx)
}

// GenerateImplementation mocks base method
func (m *MockProvider) GenerateImplementation(ctx context.Context, description, framework string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateImplementation", ctx, description, framework)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateImplementation indicates an expected call of GenerateImplementation
func (mr *MockProviderMockRecorder) GenerateImplementation(ctx, description, framework interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateImplementation", reflect.TypeOf((*MockProvider)(nil).GenerateImplementation), ctx, description, framework)
}

// GenerateProject mocks base method
func (m *MockProvider) GenerateProject(ctx context.Context, description string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateProject", ctx, description)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateProject indicates an expected call of GenerateProject
func (mr *MockProviderMockRecorder) GenerateProject(ctx, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateProject", reflect.TypeOf((*MockProvider)(nil).GenerateProject), ctx, description)
}

// Initialize mocks base method
func (m *MockProvider) Initialize(ctx context.Context, config map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", ctx, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockProviderMockRecorder) Initialize(ctx, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockProvider)(nil).Initialize), ctx, config)
}

// Name mocks base method
func (m *MockProvider) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockProviderMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockProvider)(nil).Name))
}

// SupportedFrameworks mocks base method
func (m *MockProvider) SupportedFrameworks() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportedFrameworks")
	ret0, _ := ret[0].([]string)
	return ret0
}

// SupportedFrameworks indicates an expected call of SupportedFrameworks
func (mr *MockProviderMockRecorder) SupportedFrameworks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportedFrameworks", reflect.TypeOf((*MockProvider)(nil).SupportedFrameworks))
}