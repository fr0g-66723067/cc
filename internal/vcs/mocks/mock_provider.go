// Code generated by go.uber.org/mock/mockgen. DO NOT EDIT.
// Source: github.com/fr0g-66723067/cc/internal/vcs (interfaces: Provider)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "go.uber.org/mock/gomock"
	reflect "reflect"
)

// MockProvider is a mock of Provider interface
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// AddFiles mocks base method
func (m *MockProvider) AddFiles(paths []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFiles", paths)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFiles indicates an expected call of AddFiles
func (mr *MockProviderMockRecorder) AddFiles(paths interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFiles", reflect.TypeOf((*MockProvider)(nil).AddFiles), paths)
}

// CommitChanges mocks base method
func (m *MockProvider) CommitChanges(message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitChanges", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitChanges indicates an expected call of CommitChanges
func (mr *MockProviderMockRecorder) CommitChanges(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitChanges", reflect.TypeOf((*MockProvider)(nil).CommitChanges), message)
}

// CreateBranch mocks base method
func (m *MockProvider) CreateBranch(name, baseBranch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBranch", name, baseBranch)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBranch indicates an expected call of CreateBranch
func (mr *MockProviderMockRecorder) CreateBranch(name, baseBranch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranch", reflect.TypeOf((*MockProvider)(nil).CreateBranch), name, baseBranch)
}

// ExportDiff mocks base method
func (m *MockProvider) ExportDiff(fromBranch, toBranch string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportDiff", fromBranch, toBranch)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportDiff indicates an expected call of ExportDiff
func (mr *MockProviderMockRecorder) ExportDiff(fromBranch, toBranch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportDiff", reflect.TypeOf((*MockProvider)(nil).ExportDiff), fromBranch, toBranch)
}

// GetBranchMetadata mocks base method
func (m *MockProvider) GetBranchMetadata(branch string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranchMetadata", branch)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranchMetadata indicates an expected call of GetBranchMetadata
func (mr *MockProviderMockRecorder) GetBranchMetadata(branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranchMetadata", reflect.TypeOf((*MockProvider)(nil).GetBranchMetadata), branch)
}

// GetCurrentBranch mocks base method
func (m *MockProvider) GetCurrentBranch() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentBranch")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentBranch indicates an expected call of GetCurrentBranch
func (mr *MockProviderMockRecorder) GetCurrentBranch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentBranch", reflect.TypeOf((*MockProvider)(nil).GetCurrentBranch))
}

// HasChanges mocks base method
func (m *MockProvider) HasChanges() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasChanges")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasChanges indicates an expected call of HasChanges
func (mr *MockProviderMockRecorder) HasChanges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasChanges", reflect.TypeOf((*MockProvider)(nil).HasChanges))
}

// Initialize mocks base method
func (m *MockProvider) Initialize(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockProviderMockRecorder) Initialize(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockProvider)(nil).Initialize), path)
}

// ListBranches mocks base method
func (m *MockProvider) ListBranches() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBranches")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBranches indicates an expected call of ListBranches
func (mr *MockProviderMockRecorder) ListBranches() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBranches", reflect.TypeOf((*MockProvider)(nil).ListBranches))
}

// Name mocks base method
func (m *MockProvider) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockProviderMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockProvider)(nil).Name))
}

// SetBranchMetadata mocks base method
func (m *MockProvider) SetBranchMetadata(branch string, metadata map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBranchMetadata", branch, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBranchMetadata indicates an expected call of SetBranchMetadata
func (mr *MockProviderMockRecorder) SetBranchMetadata(branch, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBranchMetadata", reflect.TypeOf((*MockProvider)(nil).SetBranchMetadata), branch, metadata)
}

// SwitchBranch mocks base method
func (m *MockProvider) SwitchBranch(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwitchBranch", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// SwitchBranch indicates an expected call of SwitchBranch
func (mr *MockProviderMockRecorder) SwitchBranch(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchBranch", reflect.TypeOf((*MockProvider)(nil).SwitchBranch), name)
}