// Code generated by go.uber.org/mock/mockgen. DO NOT EDIT.
// Source: github.com/fr0g-66723067/cc/internal/container (interfaces: Provider)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "go.uber.org/mock/gomock"
	reflect "reflect"
)

// MockProvider is a mock of Provider interface
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// CopyFilesFromContainer mocks base method
func (m *MockProvider) CopyFilesFromContainer(ctx context.Context, containerID, containerPath, localPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFilesFromContainer", ctx, containerID, containerPath, localPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyFilesFromContainer indicates an expected call of CopyFilesFromContainer
func (mr *MockProviderMockRecorder) CopyFilesFromContainer(ctx, containerID, containerPath, localPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFilesFromContainer", reflect.TypeOf((*MockProvider)(nil).CopyFilesFromContainer), ctx, containerID, containerPath, localPath)
}

// CopyFilesToContainer mocks base method
func (m *MockProvider) CopyFilesToContainer(ctx context.Context, containerID, localPath, containerPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFilesToContainer", ctx, containerID, localPath, containerPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyFilesToContainer indicates an expected call of CopyFilesToContainer
func (mr *MockProviderMockRecorder) CopyFilesToContainer(ctx, containerID, localPath, containerPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFilesToContainer", reflect.TypeOf((*MockProvider)(nil).CopyFilesToContainer), ctx, containerID, localPath, containerPath)
}

// ExecuteCommand mocks base method
func (m *MockProvider) ExecuteCommand(ctx context.Context, containerID string, command []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteCommand", ctx, containerID, command)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteCommand indicates an expected call of ExecuteCommand
func (mr *MockProviderMockRecorder) ExecuteCommand(ctx, containerID, command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCommand", reflect.TypeOf((*MockProvider)(nil).ExecuteCommand), ctx, containerID, command)
}

// Initialize mocks base method
func (m *MockProvider) Initialize(ctx context.Context, config map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", ctx, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockProviderMockRecorder) Initialize(ctx, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockProvider)(nil).Initialize), ctx, config)
}

// IsRemote mocks base method
func (m *MockProvider) IsRemote() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRemote")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRemote indicates an expected call of IsRemote
func (mr *MockProviderMockRecorder) IsRemote() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRemote", reflect.TypeOf((*MockProvider)(nil).IsRemote))
}

// Name mocks base method
func (m *MockProvider) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockProviderMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockProvider)(nil).Name))
}

// RemoveContainer mocks base method
func (m *MockProvider) RemoveContainer(ctx context.Context, containerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveContainer", ctx, containerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveContainer indicates an expected call of RemoveContainer
func (mr *MockProviderMockRecorder) RemoveContainer(ctx, containerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveContainer", reflect.TypeOf((*MockProvider)(nil).RemoveContainer), ctx, containerID)
}

// RunContainer mocks base method
func (m *MockProvider) RunContainer(ctx context.Context, image string, volumeMounts, env map[string]string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunContainer", ctx, image, volumeMounts, env)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunContainer indicates an expected call of RunContainer
func (mr *MockProviderMockRecorder) RunContainer(ctx, image, volumeMounts, env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunContainer", reflect.TypeOf((*MockProvider)(nil).RunContainer), ctx, image, volumeMounts, env)
}

// StopContainer mocks base method
func (m *MockProvider) StopContainer(ctx context.Context, containerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopContainer", ctx, containerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopContainer indicates an expected call of StopContainer
func (mr *MockProviderMockRecorder) StopContainer(ctx, containerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContainer", reflect.TypeOf((*MockProvider)(nil).StopContainer), ctx, containerID)
}